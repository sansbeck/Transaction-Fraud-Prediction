# -*- coding: utf-8 -*-
"""Transaction Fraud Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xmcqBcklJ68YXYoN54U6JN-ontiWCmF3
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score, recall_score, f1_score
from imblearn.over_sampling import SMOTE

df = pd.read_csv('/content/transaction_data.csv')

print(df.info())
print(df.describe())

print(df.isnull().sum())
print(df.duplicated().sum())

df['Balance Difference'] = df['newbalanceDest'] - df['oldbalanceDest']
df['Surge Indicator'] = (df['amount'] > df['amount'].rolling(window=5).mean()).astype(int)
df['Frequency Indicator'] = df.groupby('merchant')['amount'].transform('count')
df['Merchant Indicator'] = df['merchant'].apply(lambda x: 1 if 'specific_merchant' in x else 0)

features = ['Balance Difference', 'amount', 'oldbalanceDest', 'newbalanceDest', 'Surge Indicator', 'Frequency Indicator', 'Merchant Indicator']
X = df[features]
y = df['isFraud']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(X_train, y_train)
y_pred_knn = knn.predict(X_test)

print("KNN Model")
print(f"Accuracy: {accuracy_score(y_test, y_pred_knn)}")
print(f"Recall: {recall_score(y_test, y_pred_knn)}")
print(f"F1 Score: {f1_score(y_test, y_pred_knn)}")
print(confusion_matrix(y_test, y_pred_knn))
print(classification_report(y_test, y_pred_knn))

dt = DecisionTreeClassifier(random_state=42)
dt.fit(X_train, y_train)
y_pred_dt = dt.predict(X_test)

print("\nDecision Tree Model")
print(f"Accuracy: {accuracy_score(y_test, y_pred_dt)}")
print(f"Recall: {recall_score(y_test, y_pred_dt)}")
print(f"F1 Score: {f1_score(y_test, y_pred_dt)}")
print(confusion_matrix(y_test, y_pred_dt))
print(classification_report(y_test, y_pred_dt))

smote = SMOTE(random_state=42)
X_res, y_res = smote.fit_resample(X_train, y_train)
dt_smote = DecisionTreeClassifier(random_state=42)
dt_smote.fit(X_res, y_res)
y_pred_dt_smote = dt_smote.predict(X_test)

print("\nDecision Tree Model with SMOTE")
print(f"Accuracy: {accuracy_score(y_test, y_pred_dt_smote)}")
print(f"Recall: {recall_score(y_test, y_pred_dt_smote)}")
print(f"F1 Score: {f1_score(y_test, y_pred_dt_smote)}")
print(confusion_matrix(y_test, y_pred_dt_smote))
print(classification_report(y_test, y_pred_dt_smote))

print("\nImproved Metrics using SMOTE and Feature Engineering")